{
	"name": "from_Int_to_dw_fact",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Int_Orders",
						"type": "DatasetReference"
					},
					"name": "orders"
				},
				{
					"dataset": {
						"referenceName": "Int_OrderLines",
						"type": "DatasetReference"
					},
					"name": "orderline"
				},
				{
					"dataset": {
						"referenceName": "dw_souce_cities",
						"type": "DatasetReference"
					},
					"name": "cities"
				},
				{
					"dataset": {
						"referenceName": "dw_source_customers",
						"type": "DatasetReference"
					},
					"name": "customers"
				},
				{
					"dataset": {
						"referenceName": "dw_source_employee",
						"type": "DatasetReference"
					},
					"name": "employee"
				},
				{
					"dataset": {
						"referenceName": "dw_source_stockItems",
						"type": "DatasetReference"
					},
					"name": "stockitem"
				},
				{
					"dataset": {
						"referenceName": "Int_Customers",
						"type": "DatasetReference"
					},
					"name": "intCities"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "dw_sink_Orders_fact",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "JoinOrder"
				},
				{
					"name": "Select1"
				},
				{
					"name": "custCitiyID"
				},
				{
					"name": "JoinCitiesCust"
				},
				{
					"name": "JoinCities"
				},
				{
					"name": "Select2"
				},
				{
					"name": "JoinCustomers"
				},
				{
					"name": "Select3"
				},
				{
					"name": "JoinStockItems"
				},
				{
					"name": "Select4"
				},
				{
					"name": "JoinEmployees"
				},
				{
					"name": "SelectempKeyID"
				},
				{
					"name": "Select5"
				},
				{
					"name": "Join1"
				},
				{
					"name": "Select6"
				},
				{
					"name": "addtaxtotal"
				},
				{
					"name": "SurrogateKey1"
				},
				{
					"name": "Select7"
				}
			],
			"script": "source(output(\n\t\tOrderID as integer,\n\t\tCustomerID as integer,\n\t\tSalespersonPersonID as integer,\n\t\tPickedByPersonID as integer,\n\t\tContactPersonID as integer,\n\t\tBackorderOrderID as integer,\n\t\tOrderDate as date,\n\t\tExpectedDeliveryDate as date,\n\t\tCustomerPurchaseOrderNumber as string,\n\t\tIsUndersupplyBackordered as boolean,\n\t\tComments as string,\n\t\tDeliveryInstructions as string,\n\t\tInternalComments as string,\n\t\tPickingCompletedWhen as timestamp,\n\t\tLastEditedBy as integer,\n\t\tLastEditedWhen as timestamp,\n\t\tIsActive as integer,\n\t\tSurrogate as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> orders\nsource(output(\n\t\tOrderLineID as integer,\n\t\tOrderID as integer,\n\t\tStockItemID as integer,\n\t\tDescription as string,\n\t\tPackageTypeID as integer,\n\t\tQuantity as integer,\n\t\tUnitPrice as decimal(18,2),\n\t\tTaxRate as decimal(18,3),\n\t\tPickedQuantity as integer,\n\t\tPickingCompletedWhen as timestamp,\n\t\tLastEditedBy as integer,\n\t\tLastEditedWhen as timestamp,\n\t\tIsActive as integer,\n\t\tSurrogate as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> orderline\nsource(output(\n\t\tWWI_CityID as integer,\n\t\tCityName as string,\n\t\tLocation as binary,\n\t\tLatestRecordedPopulation as long,\n\t\tValidFrom as timestamp,\n\t\tValidTo as timestamp,\n\t\tIsActive as integer,\n\t\tCity_Key as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> cities\nsource(output(\n\t\tCustomer_Key as long,\n\t\tCustomerID as integer,\n\t\tCustomerName as string,\n\t\tBillToCustomer as string,\n\t\tPrimaryContactPerson as string,\n\t\tPostalPostalCode as string,\n\t\tValidFrom as timestamp,\n\t\tValidTo as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> customers\nsource(output(\n\t\tEmployee_Key as long,\n\t\tWWIEmployeeID as integer,\n\t\tEmployeeName as string,\n\t\tPreferredName as string,\n\t\tIsSalesperson as boolean,\n\t\tPhoto as binary,\n\t\tValidFrom as timestamp,\n\t\tValidTo as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> employee\nsource(output(\n\t\tStockItem_Key as long,\n\t\tStockItemID as integer,\n\t\tStockItemName as string,\n\t\tUnitPackage as string,\n\t\tOuterPackage as string,\n\t\tBrand as string,\n\t\tSize as string,\n\t\tLeadTimeDays as integer,\n\t\tQuantityPerOuter as integer,\n\t\tIsChillerStock as boolean,\n\t\tBarcode as string,\n\t\tTaxRate as decimal(18,3),\n\t\tUnitPrice as decimal(18,2),\n\t\tRecommendedRetailPrice as decimal(18,2),\n\t\tTypicalWeightPerUnit as decimal(18,3),\n\t\tPhoto as binary,\n\t\tValidFrom as timestamp,\n\t\tValidTo as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> stockitem\nsource(output(\n\t\tCustomerID as integer,\n\t\tCustomerName as string,\n\t\tBillToCustomerID as integer,\n\t\tCustomerCategoryID as integer,\n\t\tBuyingGroupID as integer,\n\t\tPrimaryContactPersonID as integer,\n\t\tAlternateContactPersonID as integer,\n\t\tDeliveryMethodID as integer,\n\t\tDeliveryCityID as integer,\n\t\tPostalCityID as integer,\n\t\tCreditLimit as decimal(18,2),\n\t\tAccountOpenedDate as date,\n\t\tStandardDiscountPercentage as decimal(18,3),\n\t\tIsStatementSent as boolean,\n\t\tIsOnCreditHold as boolean,\n\t\tPaymentDays as integer,\n\t\tPhoneNumber as string,\n\t\tFaxNumber as string,\n\t\tDeliveryRun as string,\n\t\tRunPosition as string,\n\t\tWebsiteURL as string,\n\t\tDeliveryAddressLine1 as string,\n\t\tDeliveryAddressLine2 as string,\n\t\tDeliveryPostalCode as string,\n\t\tDeliveryLocation as binary,\n\t\tPostalAddressLine1 as string,\n\t\tPostalAddressLine2 as string,\n\t\tPostalPostalCode as string,\n\t\tLastEditedBy as integer,\n\t\tValidFrom as timestamp,\n\t\tValidTo as timestamp,\n\t\tIsActive as integer,\n\t\tSurrogate as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> intCities\norderline, orders join(orderline@OrderID == orders@OrderID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinOrder\nJoinOrder select(mapColumn(\n\t\tOrderLineID,\n\t\tCustomerID,\n\t\tStockItemID,\n\t\tOrderDate,\n\t\tPickingCompletedWhen = orderline@PickingCompletedWhen,\n\t\tSalespersonPersonID,\n\t\tPickedByPersonID,\n\t\tOrderID = orderline@OrderID,\n\t\tBackorderOrderID,\n\t\tDescription,\n\t\tPackageTypeID,\n\t\tQuantity,\n\t\tUnitPrice,\n\t\tTaxRate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nintCities select(mapColumn(\n\t\tCustomerID,\n\t\tPostalCityID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> custCitiyID\nSelect1, custCitiyID join(Select1@CustomerID == custCitiyID@CustomerID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinCitiesCust\nJoinCitiesCust, cities join(PostalCityID == WWI_CityID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinCities\nJoinCities select(mapColumn(\n\t\tOrderLineID,\n\t\tCity_Key,\n\t\tCustomerID = Select1@CustomerID,\n\t\tStockItemID,\n\t\tOrderDate,\n\t\tPickingCompletedWhen,\n\t\tSalespersonPersonID,\n\t\tPickedByPersonID,\n\t\tOrderID,\n\t\tBackorderOrderID,\n\t\tDescription,\n\t\tPackageTypeID,\n\t\tQuantity,\n\t\tUnitPrice,\n\t\tTaxRate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nSelect2, customers join(Select2@CustomerID == customers@CustomerID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinCustomers\nJoinCustomers select(mapColumn(\n\t\tOrderLineID,\n\t\tCity_Key,\n\t\tCustomer_Key,\n\t\tStockItemID,\n\t\tOrderDate,\n\t\tPickingCompletedWhen,\n\t\tSalespersonPersonID,\n\t\tPickedByPersonID,\n\t\tOrderID,\n\t\tBackorderOrderID,\n\t\tDescription,\n\t\tPackageTypeID,\n\t\tQuantity,\n\t\tUnitPrice,\n\t\tTaxRate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nSelect3, stockitem join(Select3@StockItemID == stockitem@StockItemID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinStockItems\nJoinStockItems select(mapColumn(\n\t\tOrderLineID,\n\t\tCity_Key,\n\t\tCustomer_Key,\n\t\tStockItem_Key,\n\t\tOrderDate,\n\t\tPickedDate = PickingCompletedWhen,\n\t\tSalespersonPersonID,\n\t\tPickedByPersonID,\n\t\tWWIOrderID = OrderID,\n\t\tWWIBackorderOrderID = BackorderOrderID,\n\t\tDescription,\n\t\tUnitPackageType = UnitPackage,\n\t\tOuterPackageType = OuterPackage,\n\t\tQuantity,\n\t\tUnitPrice = Select3@UnitPrice,\n\t\tTaxRate = Select3@TaxRate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nSelect4, SelectempKeyID join(SalespersonPersonID == WWIEmployeeID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinEmployees\nemployee select(mapColumn(\n\t\tEmployee_Key,\n\t\tWWIEmployeeID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectempKeyID\nJoinEmployees select(mapColumn(\n\t\tOrderLineID,\n\t\tCity_Key,\n\t\tCustomer_Key,\n\t\tStockItem_Key,\n\t\tOrderDate,\n\t\tPickedDate,\n\t\tSalesperson_Key = Employee_Key,\n\t\tPickedByPersonID,\n\t\tWWIOrderID,\n\t\tWWIBackorderOrderID,\n\t\tDescription,\n\t\tUnitPackageType,\n\t\tOuterPackageType,\n\t\tQuantity,\n\t\tUnitPrice,\n\t\tTaxRate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select5\nSelect5, SelectempKeyID join(PickedByPersonID == WWIEmployeeID,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\tOrderLineID,\n\t\tCity_Key,\n\t\tCustomer_Key,\n\t\tStockItem_Key,\n\t\tOrderDate,\n\t\tPickedDate,\n\t\tSalesperson_Key,\n\t\tPicker_Key = Employee_Key,\n\t\tWWIOrderID,\n\t\tWWIBackorderOrderID,\n\t\tDescription,\n\t\tUnitPackageType,\n\t\tOuterPackageType,\n\t\tQuantity,\n\t\tUnitPrice,\n\t\tTaxRate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select6\nSelect6 derive(Total_Excluding_Tax = UnitPrice*Quantity,\n\t\tTax_Amount = UnitPrice*Quantity*TaxRate/100,\n\t\tTotal_Including_Tax = UnitPrice*Quantity*(1+TaxRate/100)) ~> addtaxtotal\naddtaxtotal keyGenerate(output(Order_Key as long),\n\tstartAt: 1L) ~> SurrogateKey1\nSurrogateKey1 select(mapColumn(\n\t\tOrder_Key,\n\t\tCity_Key,\n\t\tCustomer_Key,\n\t\tStockItem_Key,\n\t\tOrderDate,\n\t\tPickedDate,\n\t\tSalesperson_Key,\n\t\tPicker_Key,\n\t\tWWIOrderID,\n\t\tWWIBackorderOrderID,\n\t\tDescription,\n\t\tUnitPackageType,\n\t\tOuterPackageType,\n\t\tQuantity,\n\t\tUnitPrice,\n\t\tTaxRate,\n\t\tTotal_Excluding_Tax,\n\t\tTax_Amount,\n\t\tTotal_Including_Tax\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select7\nSelect7 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
		}
	}
}